<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rtthread-stm32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rtthread-stm32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Wed Nov 02 21:46:53 2016
<BR><P>
<H3>Maximum Stack Usage =        824 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
copy &rArr; copydir &rArr;  copydir (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2a9]">rt_device_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[116]">rt_assert_handler</a><BR>
 <LI><a href="#[2a0]">rt_exit_critical</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2bf]">rt_schedule</a><BR>
 <LI><a href="#[e6]">quik_sort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e6]">quik_sort</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[32d]">copydir</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[32d]">copydir</a><BR>
 <LI><a href="#[3f1]">proc_assign_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f1]">proc_assign_expr</a><BR>
 <LI><a href="#[3f8]">proc_cast_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f8]">proc_cast_expr</a><BR>
 <LI><a href="#[3f7]">proc_unary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f8]">proc_cast_expr</a><BR>
 <LI><a href="#[3f5]">proc_primary_expr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f3]">proc_expr</a><BR>
 <LI><a href="#[3f0]">proc_param_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f1]">proc_assign_expr</a><BR>
 <LI><a href="#[3d6]">finsh_type_check</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d6]">finsh_type_check</a><BR>
 <LI><a href="#[3d4]">finsh_compile</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d4]">finsh_compile</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from esp8266.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from esp8266.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7c]">OP_add_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[7e]">OP_add_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[7d]">OP_add_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[8b]">OP_and_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[8d]">OP_and_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[8c]">OP_and_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[94]">OP_bw_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[96]">OP_bw_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[95]">OP_bw_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a7]">OP_call</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[82]">OP_div_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[84]">OP_div_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[83]">OP_div_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[9d]">OP_ld_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[9f]">OP_ld_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a0]">OP_ld_value_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a8]">OP_ld_value_byte_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a2]">OP_ld_value_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[aa]">OP_ld_value_dword_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a1]">OP_ld_value_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a9]">OP_ld_value_word_stack</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[9e]">OP_ld_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[85]">OP_mod_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[87]">OP_mod_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[86]">OP_mod_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[88]">OP_mul_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[8a]">OP_mul_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[89]">OP_mul_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[7b]">OP_no_op</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[8e]">OP_or_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[90]">OP_or_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[8f]">OP_or_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a6]">OP_pop</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[97]">OP_shl_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[99]">OP_shl_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[98]">OP_shl_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[9a]">OP_shr_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[9c]">OP_shr_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[9b]">OP_shr_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a3]">OP_st_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a5]">OP_st_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[a4]">OP_st_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[7f]">OP_sub_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[81]">OP_sub_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[80]">OP_sub_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[91]">OP_xor_byte</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[93]">OP_xor_dword</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[92]">OP_xor_word</a> from finsh_ops.o(.text) referenced from finsh_ops.o(.constdata)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from sdcard.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from board.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[56]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">TP_Adjust</a> from touch_screen.o(.text) referenced 2 times from touch_screen.o(.data)
 <LI><a href="#[0]">TP_Init</a> from touch_screen.o(.text) referenced 2 times from touch_screen.o(.data)
 <LI><a href="#[1]">TP_Scan</a> from touch_screen.o(.text) referenced 2 times from touch_screen.o(.data)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from usart.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[57]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[61]">_spi_bus_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[5f]">_spi_bus_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[60]">_spi_bus_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[64]">_spidev_device_control</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[62]">_spidev_device_read</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[63]">_spidev_device_write</a> from spi_dev.o(.text) referenced from spi_dev.o(.text)
 <LI><a href="#[bc]">cat</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[6a]">configure</a> from spi_bus.o(.text) referenced 3 times from spi_bus.o(.constdata)
 <LI><a href="#[bd]">copy</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[bf]">df</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[71]">dfs_elm_close</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[75]">dfs_elm_flush</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[77]">dfs_elm_getdents</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[72]">dfs_elm_ioctl</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[76]">dfs_elm_lseek</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[6e]">dfs_elm_mkfs</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[6c]">dfs_elm_mount</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[70]">dfs_elm_open</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[73]">dfs_elm_read</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[7a]">dfs_elm_rename</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[79]">dfs_elm_stat</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[6f]">dfs_elm_statfs</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[78]">dfs_elm_unlink</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[6d]">dfs_elm_unmount</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[74]">dfs_elm_write</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.constdata)
 <LI><a href="#[af]">dfs_init</a> from dfs.o(.text) referenced from dfs.o(.rti_fn.3)
 <LI><a href="#[b1]">elm_init</a> from dfs_elm.o(.text) referenced from dfs_elm.o(.rti_fn.4)
 <LI><a href="#[65]">finsh_rx_ind</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[b0]">finsh_system_init</a> from shell.o(.text) referenced from shell.o(.rti_fn.3)
 <LI><a href="#[3bd]">finsh_thread_entry</a> from shell.o(.text) referenced from shell.o(.text)
 <LI><a href="#[b5]">get_time</a> from rtc_thread.o(.text) referenced from rtc_thread.o(FSymTab)
 <LI><a href="#[c1]">hello</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[b6]">led</a> from led.o(.text) referenced from led.o(FSymTab)
 <LI><a href="#[cc]">list</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[cb]">list_device</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[c5]">list_event</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[c7]">list_mailbox</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[b9]">list_mem</a> from mem.o(.text) referenced from mem.o(FSymTab)
 <LI><a href="#[c9]">list_mempool</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[c8]">list_msgqueue</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[c6]">list_mutex</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[c4]">list_sem</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[c3]">list_thread</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[ca]">list_timer</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[ba]">ls</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[49]">main</a> from startup.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c0]">mkdir</a> from dfs_posix.o(.text) referenced from dfs_posix.o(FSymTab)
 <LI><a href="#[be]">mkfs</a> from dfs_fs.o(.text) referenced from dfs_fs.o(FSymTab)
 <LI><a href="#[b7]">open_door</a> from beep_door.o(.text) referenced from beep_door.o(FSymTab)
 <LI><a href="#[4c]">rc522_thread_entry</a> from rfid_thread.o(.text) referenced from main.o(.text)
 <LI><a href="#[bb]">rm</a> from dfs_file.o(.text) referenced from dfs_file.o(FSymTab)
 <LI><a href="#[ae]">rt_hw_sdcard_init</a> from sdcard.o(.text) referenced from sdcard.o(.rti_fn.2)
 <LI><a href="#[cf]">rt_init_thread_entry</a> from application.o(.text) referenced from application.o(.text)
 <LI><a href="#[52]">rt_sdcard_close</a> from sdcard.o(.text) referenced from sdcard.o(.text)
 <LI><a href="#[55]">rt_sdcard_control</a> from sdcard.o(.text) referenced from sdcard.o(.text)
 <LI><a href="#[50]">rt_sdcard_init</a> from sdcard.o(.text) referenced from sdcard.o(.text)
 <LI><a href="#[51]">rt_sdcard_open</a> from sdcard.o(.text) referenced from sdcard.o(.text)
 <LI><a href="#[53]">rt_sdcard_read</a> from sdcard.o(.text) referenced from sdcard.o(.text)
 <LI><a href="#[54]">rt_sdcard_write</a> from sdcard.o(.text) referenced from sdcard.o(.text)
 <LI><a href="#[5b]">rt_serial_close</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[5e]">rt_serial_control</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[59]">rt_serial_init</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[5a]">rt_serial_open</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[5c]">rt_serial_read</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[5d]">rt_serial_write</a> from serial.o(.text) referenced from serial.o(.text)
 <LI><a href="#[2fd]">rt_thread_exit</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[58]">rt_thread_idle_entry</a> from idle.o(.text) referenced from idle.o(.text)
 <LI><a href="#[300]">rt_thread_timeout</a> from thread.o(.text) referenced from thread.o(.text)
 <LI><a href="#[4f]">rtc_thread_entry</a> from rtc_thread.o(.text) referenced from main.o(.text)
 <LI><a href="#[ad]">rti_board_end</a> from components.o(.text) referenced from components.o(.rti_fn.1.end)
 <LI><a href="#[ac]">rti_board_start</a> from components.o(.text) referenced from components.o(.rti_fn.0.end)
 <LI><a href="#[b2]">rti_end</a> from components.o(.text) referenced from components.o(.rti_fn.6.end)
 <LI><a href="#[ab]">rti_start</a> from components.o(.text) referenced from components.o(.rti_fn.0)
 <LI><a href="#[b3]">send_get_card_event</a> from rfid_thread.o(.text) referenced from rfid_thread.o(FSymTab)
 <LI><a href="#[b8]">set_lcd_led</a> from pwm.o(.text) referenced from pwm.o(FSymTab)
 <LI><a href="#[b4]">set_time</a> from rtc_thread.o(.text) referenced from rtc_thread.o(FSymTab)
 <LI><a href="#[66]">stm32_configure</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[67]">stm32_control</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[69]">stm32_getc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[68]">stm32_putc</a> from usart.o(.text) referenced from usart.o(.constdata)
 <LI><a href="#[4b]">touch_screen_thread_entry</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[4d]">user_check_thread_entry</a> from user_check_thread.o(.text) referenced from main.o(.text)
 <LI><a href="#[4a]">user_init_thread_entry</a> from main.o(.text) referenced from application.o(.text)
 <LI><a href="#[c2]">version</a> from cmd.o(.text) referenced from cmd.o(FSymTab)
 <LI><a href="#[4e]">wifi_thread_entry</a> from wifi_thread.o(.text) referenced from main.o(.text)
 <LI><a href="#[6b]">xfer</a> from spi_bus.o(.text) referenced 3 times from spi_bus.o(.constdata)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[57]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[426]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[cd]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[423]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[427]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[428]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[429]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[42a]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[42b]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[cf]"></a>rt_init_thread_entry</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = rt_init_thread_entry &rArr; dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[d5]"></a>rt_application_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, application.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[d6]"></a>get_set_device_addr</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, device_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = get_set_device_addr &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>

<P><STRONG><a name="[dc]"></a>get_set_device_name</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, device_config.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = get_set_device_name &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>

<P><STRONG><a name="[4a]"></a>user_init_thread_entry</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = user_init_thread_entry &rArr; TP_Init &rArr; TP_Adjust &rArr; TP_Get_Adjdata &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_spi_bus_init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_beep_door_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_name
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_addr
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(.text)
</UL>
<P><STRONG><a name="[100]"></a>bin_search</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, p_database.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bin_search
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
</UL>

<P><STRONG><a name="[e6]"></a>quik_sort</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, p_database.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = quik_sort &rArr;  quik_sort (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quik_sort
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quik_sort
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
</UL>

<P><STRONG><a name="[e7]"></a>get_set_user_num</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, p_database.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = get_set_user_num &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
</UL>

<P><STRONG><a name="[e8]"></a>get_set_user_num_max</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, p_database.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = get_set_user_num_max &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
</UL>

<P><STRONG><a name="[e9]"></a>add_del_get_one_user</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, p_database.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = add_del_get_one_user &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
</UL>

<P><STRONG><a name="[eb]"></a>get_set_state</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, p_database.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = get_set_state &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
</UL>

<P><STRONG><a name="[e0]"></a>init_card_array</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, p_database.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = init_card_array &rArr; get_set_user_num_max &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num_max
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;quik_sort
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>

<P><STRONG><a name="[4c]"></a>rc522_thread_entry</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rfid_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rc522_thread_entry &rArr; ReadID &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadID
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b3]"></a>send_get_card_event</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rfid_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = send_get_card_event &rArr; rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rfid_thread.o(FSymTab)
</UL>
<P><STRONG><a name="[4f]"></a>rtc_thread_entry</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, rtc_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rtc_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GPIO_Init
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Time_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_ReadWrite_Time
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Check
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[b4]"></a>set_time</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, rtc_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = set_time &rArr; DS1307_Time_Init &rArr; DS1307_Operate_Register &rArr; IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Time_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_thread.o(FSymTab)
</UL>
<P><STRONG><a name="[b5]"></a>get_time</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, rtc_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = get_time &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtc_thread.o(FSymTab)
</UL>
<P><STRONG><a name="[f3]"></a>assert_failed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearFlag
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetFlagStatus
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GenerateSWInterrupt
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearITPendingBit
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetITStatus
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_MCOConfig
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClockSecuritySystemCmd
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_USBCLKConfig
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ITConfig
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK2Config
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PCLK1Config
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HCLKConfig
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSICmd
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AdjustHSICalibrationValue
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_HSEConfig
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemLPConfig
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDACmd
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IrDAConfig
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OneBitMethodCmd
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_OverSampling8Cmd
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_HalfDuplexCmd
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardNACKCmd
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SmartCardCmd
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetPrescaler
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetGuardTime
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendBreak
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINCmd
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_LINBreakDetectLengthConfig
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiverWakeUpCmd
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_WakeUpConfig
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetAddress
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ETH_MediaInterfaceConfig
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EventOutputCmd
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EventOutputConfig
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinLockConfig
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Write
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputData
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputData
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCEATACmd
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_CEATAITCmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_CommandCompletionCmd
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendSDIOSuspendCmd
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOOperation
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetSDIOReadWaitMode
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_StopSDIOReadWait
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_StartSDIOReadWait
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearITPendingBit
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetITStatus
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ClearFlag
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_BiDirectionalLineConfig
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetCRCPolynomial
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetCRC
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_TransmitCRC
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_DataSizeConfig
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SSOutputCmd
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_NSSInternalSoftwareConfig
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMACmd
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ITConfig
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Cmd
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetFlagStatus
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetPrescaler
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCounter
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture4
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture3
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture2
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetCapture1
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetClockDivision
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetAutoreload
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCounter
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectMasterSlaveMode
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectSlaveMode
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOutputTrigger
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOnePulseMode
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectHallSensor
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateRequestConfig
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_UpdateDisableConfig
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectOCxM
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxNCmd
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxCmd
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PolarityConfig
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3NPolarityConfig
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PolarityConfig
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2NPolarityConfig
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PolarityConfig
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1NPolarityConfig
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PolarityConfig
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC4Ref
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC3Ref
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC2Ref
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearOC1Ref
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4FastConfig
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3FastConfig
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2FastConfig
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1FastConfig
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCPreloadControl
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCCDMA
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectCOM
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC4Config
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC3Config
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC2Config
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ForcedOC1Config
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_EncoderInterfaceConfig
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CounterModeConfig
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PrescalerConfig
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_InternalClockConfig
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMACmd
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAConfig
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GenerateEvent
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_BDTRConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ClearITPendingBit
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_GetITStatus
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ClearFlag
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_GetFlagStatus
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_ITConfig
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDECCCmd
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_PCCARDCmd
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDCmd
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_PCCARDInit
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDInit
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NANDDeInit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMDeInit
</UL>

<P><STRONG><a name="[f4]"></a>rtthread_startup</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4d]"></a>user_check_thread_entry</STRONG> (Thumb, 728 bytes, Stack size 24 bytes, user_check_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = user_check_thread_entry &rArr; get_set_state &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_state
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_del_get_one_user
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num_max
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_search
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>wifi_thread_entry</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, wifi_thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = wifi_thread_entry &rArr; WriteTest &rArr; esp8266_spi_transmit &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_esp8266
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTest
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>NVIC_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Configuration &rArr; NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[105]"></a>EXT_SRAM_Configuration</STRONG> (Thumb, 302 bytes, Stack size 96 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = EXT_SRAM_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f5]"></a>rt_hw_board_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, board.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_hw_board_init &rArr; EXT_SRAM_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_components_board_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_SRAM_Configuration
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>rt_hw_led_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_hw_led_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[112]"></a>rt_hw_led_on</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_hw_led_on &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[114]"></a>rt_hw_led_off</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_hw_led_off &rArr; GPIO_ResetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led
</UL>

<P><STRONG><a name="[b6]"></a>led</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = led &rArr; rt_hw_led_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_off
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_on
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(FSymTab)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = USART1_IRQHandler &rArr; uart_isr &rArr; dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = DMA1_Channel5_IRQHandler &rArr; dma_rx_done_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = USART2_IRQHandler &rArr; uart_isr &rArr; dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = DMA1_Channel6_IRQHandler &rArr; dma_rx_done_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = USART3_IRQHandler &rArr; uart_isr &rArr; dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; dma_rx_done_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10e]"></a>rt_hw_usart_init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[136]"></a>SD_InitializeCards</STRONG> (Thumb, 356 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_InitializeCards &rArr; CmdResp6Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetPowerState
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13e]"></a>SD_PowerON</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[143]"></a>SD_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SD_Init &rArr; SD_PowerON &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DeInit
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[145]"></a>SD_PowerOFF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SetPowerState
</UL>

<P><STRONG><a name="[164]"></a>SD_GetCardInfo</STRONG> (Thumb, 738 bytes, Stack size 12 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SD_GetCardInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[14a]"></a>SD_EnableWideBusOperation</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_EnableWideBusOperation &rArr; SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[165]"></a>SD_SetDeviceMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[14b]"></a>SD_SelectDeselect</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = SD_SelectDeselect &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[14d]"></a>SD_ReadBlock</STRONG> (Thumb, 586 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_ReadBlock &rArr; DMA_RxConfiguration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_read
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[153]"></a>SD_ReadMultiBlocks</STRONG> (Thumb, 810 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = SD_ReadMultiBlocks &rArr; DMA_RxConfiguration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_read
</UL>

<P><STRONG><a name="[156]"></a>SD_WriteBlock</STRONG> (Thumb, 838 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = SD_WriteBlock &rArr; DMA_TxConfiguration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_write
</UL>

<P><STRONG><a name="[158]"></a>SD_WriteMultiBlocks</STRONG> (Thumb, 1024 bytes, Stack size 48 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = SD_WriteMultiBlocks &rArr; DMA_TxConfiguration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_from_bytes_to_power_of_two
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DMACmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_write
</UL>

<P><STRONG><a name="[42c]"></a>SD_GetTransferState</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>SD_StopTransfer</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[15a]"></a>SD_Erase</STRONG> (Thumb, 354 bytes, Stack size 32 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>

<P><STRONG><a name="[15b]"></a>SD_SendStatus</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>

<P><STRONG><a name="[15c]"></a>SD_SendSDStatus</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, sdcard.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>

<P><STRONG><a name="[15d]"></a>SD_ProcessIRQSrc</STRONG> (Thumb, 598 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SD_ProcessIRQSrc &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_WriteData
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ITConfig
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetITStatus
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearITPendingBit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[ae]"></a>rt_hw_sdcard_init</STRONG> (Thumb, 482 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_hw_sdcard_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SetDeviceMode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCardInfo
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.rti_fn.2)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SDIO_IRQHandler &rArr; SD_ProcessIRQSrc &rArr; SD_StopTransfer &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[df]"></a>rt_hw_beep_door_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, beep_door.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_hw_beep_door_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>

<P><STRONG><a name="[b7]"></a>open_door</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, beep_door.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = open_door &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> beep_door.o(FSymTab)
</UL>
<P><STRONG><a name="[16a]"></a>DS1307_Write_Byte</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, ds1307.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DS1307_Write_Byte &rArr; IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Time_Init
</UL>

<P><STRONG><a name="[16e]"></a>DS1307_Read_Byte</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, ds1307.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = DS1307_Read_Byte &rArr; IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Check
</UL>

<P><STRONG><a name="[171]"></a>DS1307_Operate_Register</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, ds1307.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DS1307_Operate_Register &rArr; IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Time_Init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_ReadWrite_Time
</UL>

<P><STRONG><a name="[f2]"></a>DS1307_ReadWrite_Time</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, ds1307.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = DS1307_ReadWrite_Time &rArr; DS1307_Operate_Register &rArr; IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Operate_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_thread_entry
</UL>

<P><STRONG><a name="[f0]"></a>DS1307_Check</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ds1307.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = DS1307_Check &rArr; DS1307_Read_Byte &rArr; IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_thread_entry
</UL>

<P><STRONG><a name="[172]"></a>DS1307_RAM_Write_Data</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, ds1307.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
</UL>

<P><STRONG><a name="[173]"></a>DS1307_RAM_Read_Data</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, ds1307.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[f1]"></a>DS1307_Time_Init</STRONG> (Thumb, 222 bytes, Stack size 8 bytes, ds1307.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DS1307_Time_Init &rArr; DS1307_Operate_Register &rArr; IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Operate_Register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_time
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_thread_entry
</UL>

<P><STRONG><a name="[174]"></a>esp8266_spi_transmit</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = esp8266_spi_transmit &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteTest
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTest
</UL>

<P><STRONG><a name="[102]"></a>WriteTest</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = WriteTest &rArr; esp8266_spi_transmit &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_spi_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_thread_entry
</UL>

<P><STRONG><a name="[176]"></a>ReadTest</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, esp8266.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_spi_transmit
</UL>

<P><STRONG><a name="[177]"></a>esp8266_exti_init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = esp8266_exti_init &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_esp8266
</UL>

<P><STRONG><a name="[17a]"></a>esp8266_attach_device</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = esp8266_attach_device &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_esp8266
</UL>

<P><STRONG><a name="[101]"></a>init_esp8266</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = init_esp8266 &rArr; rt_spi_configure &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_attach_device
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_thread_entry
</UL>

<P><STRONG><a name="[42d]"></a>check_state_line</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, esp8266.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EXTI4_IRQHandler &rArr; EXTI_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, esp8266.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = EXTI9_5_IRQHandler &rArr; EXTI_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b8]"></a>set_lcd_led</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = set_lcd_led &rArr; TIM_SetCompare2 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pwm.o(FSymTab)
</UL>
<P><STRONG><a name="[182]"></a>rt_hw_lcd_led_init</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, pwm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_hw_lcd_led_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_led
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[18a]"></a>rc522_attach_device</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rc522_attach_device &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
</UL>

<P><STRONG><a name="[18b]"></a>WriteRawRC</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
</UL>

<P><STRONG><a name="[18c]"></a>ReadRawRC</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = ReadRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
</UL>

<P><STRONG><a name="[18d]"></a>SetBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = SetBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>

<P><STRONG><a name="[18e]"></a>PcdAntennaOn</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC522
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[18f]"></a>ClearBitMask</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = ClearBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[190]"></a>M500PcdConfigISOType</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
</UL>

<P><STRONG><a name="[191]"></a>PcdAntennaOff</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = PcdAntennaOff &rArr; ClearBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC522
</UL>

<P><STRONG><a name="[192]"></a>PcdReset</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = PcdReset &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC522
</UL>

<P><STRONG><a name="[ec]"></a>InitRC522</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = InitRC522 &rArr; M500PcdConfigISOType &rArr; PcdAntennaOn &rArr; SetBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_attach_device
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_thread_entry
</UL>

<P><STRONG><a name="[193]"></a>Reset_RC522</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOff
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAntennaOn
</UL>

<P><STRONG><a name="[194]"></a>PcdComMF522</STRONG> (Thumb, 412 bytes, Stack size 48 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdBakValue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAuthState
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>

<P><STRONG><a name="[195]"></a>PcdRequest</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PcdRequest &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadID
</UL>

<P><STRONG><a name="[196]"></a>PcdAnticoll</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = PcdAnticoll &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadID
</UL>

<P><STRONG><a name="[197]"></a>CalulateCRC</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetBitMask
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdBakValue
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdValue
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdHalt
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdWrite
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRead
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdSelect
</UL>

<P><STRONG><a name="[198]"></a>PcdSelect</STRONG> (Thumb, 116 bytes, Stack size 48 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearBitMask
</UL>

<P><STRONG><a name="[199]"></a>PcdAuthState</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
</UL>

<P><STRONG><a name="[19a]"></a>PcdRead</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[19b]"></a>PcdWrite</STRONG> (Thumb, 150 bytes, Stack size 48 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[19c]"></a>PcdHalt</STRONG> (Thumb, 54 bytes, Stack size 40 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[19d]"></a>PcdValue</STRONG> (Thumb, 188 bytes, Stack size 48 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[19e]"></a>PcdBakValue</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, rc522.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CalulateCRC
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdComMF522
</UL>

<P><STRONG><a name="[42e]"></a>TurnID</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, rc522.o(.text), UNUSED)

<P><STRONG><a name="[ed]"></a>ReadID</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, rc522.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = ReadID &rArr; PcdAnticoll &rArr; PcdComMF522 &rArr; ClearBitMask &rArr; WriteRawRC &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdAnticoll
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_thread_entry
</UL>

<P><STRONG><a name="[ef]"></a>IIC_GPIO_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = IIC_GPIO_Init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_thread_entry
</UL>

<P><STRONG><a name="[19f]"></a>IIC_Delay</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Write_Byte
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>

<P><STRONG><a name="[16b]"></a>IIC_Start</STRONG> (Thumb, 68 bytes, Stack size 4 bytes, soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IIC_Start &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Read_Data
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Write_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Operate_Register
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Read_Byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Write_Byte
</UL>

<P><STRONG><a name="[16d]"></a>IIC_Stop</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IIC_Stop &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Read_Data
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Write_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Operate_Register
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Read_Byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Write_Byte
</UL>

<P><STRONG><a name="[170]"></a>IIC_Ack</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IIC_Ack &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Read_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Operate_Register
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Read_Byte
</UL>

<P><STRONG><a name="[16c]"></a>IIC_Write_Byte</STRONG> (Thumb, 162 bytes, Stack size 12 bytes, soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = IIC_Write_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Read_Data
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Write_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Operate_Register
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Read_Byte
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Write_Byte
</UL>

<P><STRONG><a name="[16f]"></a>IIC_Read_Byte</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, soft_iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_Read_Byte &rArr; IIC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_RAM_Read_Data
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Operate_Register
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DS1307_Read_Byte
</UL>

<P><STRONG><a name="[e2]"></a>rt_hw_stm32_spi_bus_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, spi_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_hw_stm32_spi_bus_init &rArr; rt_spi_bus_register &rArr; rt_mutex_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Configuration
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RCC_Configuration
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>

<P><STRONG><a name="[f7]"></a>rt_hw_sram_init</STRONG> (Thumb, 214 bytes, Stack size 96 bytes, sram.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_sram_init &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1ac]"></a>FSMC_SRAM_WriteBuffer</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sram.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test_write
</UL>

<P><STRONG><a name="[1ae]"></a>FSMC_SRAM_ReadBuffer</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sram.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsmc_sram_test_read
</UL>

<P><STRONG><a name="[1ab]"></a>fsmc_sram_test_write</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_WriteBuffer
</UL>

<P><STRONG><a name="[1ad]"></a>fsmc_sram_test_read</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, sram.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_ReadBuffer
</UL>

<P><STRONG><a name="[1c5]"></a>DelayUs</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[1b0]"></a>LCD_WR_REG</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[1b3]"></a>LCD_WR_DATA</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[1b1]"></a>LCD_RD_DATA</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_RD_DATA
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
</UL>

<P><STRONG><a name="[1b4]"></a>LCD_WriteReg</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOff
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DisplayOn
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
</UL>

<P><STRONG><a name="[1af]"></a>LCD_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_ReadReg &rArr; LCD_RD_DATA
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[1bc]"></a>LCD_WriteRAM_Prepare</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ili93xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[42f]"></a>LCD_WriteRAM</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>LCD_BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[1b6]"></a>opt_delay</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[1b2]"></a>LCD_SetCursor</STRONG> (Thumb, 418 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Color_Fill
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Set_Window
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadPoint
</UL>

<P><STRONG><a name="[1b5]"></a>LCD_ReadPoint</STRONG> (Thumb, 360 bytes, Stack size 24 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opt_delay
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BGR2RGB
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[1b8]"></a>LCD_DisplayOn</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[1b9]"></a>LCD_DisplayOff</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[1ba]"></a>LCD_Scan_Dir</STRONG> (Thumb, 744 bytes, Stack size 16 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
</UL>

<P><STRONG><a name="[1bb]"></a>LCD_DrawPoint</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Draw_Big_Point
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[1bd]"></a>LCD_Fast_DrawPoint</STRONG> (Thumb, 382 bytes, Stack size 12 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[1be]"></a>LCD_SSD_BackLightSet</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = LCD_SSD_BackLightSet &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[1c2]"></a>LCD_Display_Dir</STRONG> (Thumb, 444 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Display_Dir &rArr; LCD_Scan_Dir
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Scan_Dir
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[1c3]"></a>LCD_Set_Window</STRONG> (Thumb, 538 bytes, Stack size 60 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
</UL>

<P><STRONG><a name="[1c4]"></a>LCD_Clear</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD_Clear &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[e3]"></a>TFTLCD_Init</STRONG> (Thumb, 14470 bytes, Stack size 128 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = TFTLCD_Init &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Display_Dir
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ReadReg
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteReg
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_RD_DATA
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_DATA
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WR_REG
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayUs
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_led
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>

<P><STRONG><a name="[1c6]"></a>LCD_Fill</STRONG> (Thumb, 180 bytes, Stack size 44 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fill
</UL>

<P><STRONG><a name="[1c7]"></a>LCD_Color_Fill</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetCursor
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_WriteRAM_Prepare
</UL>

<P><STRONG><a name="[1c8]"></a>LCD_DrawLine</STRONG> (Thumb, 176 bytes, Stack size 68 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
</UL>

<P><STRONG><a name="[1c9]"></a>LCD_DrawRectangle</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
</UL>

<P><STRONG><a name="[1ca]"></a>LCD_Draw_Circle</STRONG> (Thumb, 152 bytes, Stack size 28 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LCD_Draw_Circle &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
</UL>

<P><STRONG><a name="[1cb]"></a>LCD_ShowChar</STRONG> (Thumb, 272 bytes, Stack size 40 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Fast_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[1cd]"></a>LCD_Pow</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LCD_Pow
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowxNum
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>

<P><STRONG><a name="[1cc]"></a>LCD_ShowNum</STRONG> (Thumb, 174 bytes, Stack size 56 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
</UL>

<P><STRONG><a name="[1ce]"></a>LCD_ShowxNum</STRONG> (Thumb, 190 bytes, Stack size 60 bytes, ili93xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Pow
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>

<P><STRONG><a name="[e4]"></a>LCD_ShowString</STRONG> (Thumb, 102 bytes, Stack size 36 bytes, ili93xx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_ShowString &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowChar
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
</UL>

<P><STRONG><a name="[1cf]"></a>TP_Read_AD</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = TP_Read_AD &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>

<P><STRONG><a name="[1d0]"></a>TP_Read_XOY</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TP_Read_XOY &rArr; TP_Read_AD &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>

<P><STRONG><a name="[1d1]"></a>TP_Read_XY</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XOY
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
</UL>

<P><STRONG><a name="[1d2]"></a>TP_Read_XY2</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[1d3]"></a>TP_Drow_Touch_Point</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TP_Drow_Touch_Point &rArr; LCD_DrawLine &rArr; LCD_DrawPoint &rArr; LCD_SetCursor
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Draw_Circle
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawLine
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[1d4]"></a>TP_Draw_Big_Point</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, touch_screen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPoint
</UL>

<P><STRONG><a name="[1]"></a>TP_Scan</STRONG> (Thumb, 262 bytes, Stack size 24 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = TP_Scan &rArr; TP_Read_XY2 &rArr; TP_Read_XY &rArr; TP_Read_XOY &rArr; TP_Read_AD &rArr; rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch_screen.o(.data)
</UL>
<P><STRONG><a name="[1da]"></a>TP_Save_Adjdata</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = TP_Save_Adjdata &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[1db]"></a>TP_Get_Adjdata</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = TP_Get_Adjdata &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[1dc]"></a>TP_Adj_Info_Show</STRONG> (Thumb, 374 bytes, Stack size 48 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = TP_Adj_Info_Show &rArr; LCD_ShowNum &rArr; LCD_ShowChar &rArr; LCD_Fast_DrawPoint
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowNum
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[2]"></a>TP_Adjust</STRONG> (Thumb, 2150 bytes, Stack size 96 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = TP_Adjust &rArr; TP_Get_Adjdata &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_ShowString
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adj_Info_Show
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Drow_Touch_Point
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch_screen.o(.data)
</UL>
<P><STRONG><a name="[1e4]"></a>tp_attach_device</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = tp_attach_device &rArr; rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[0]"></a>TP_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, touch_screen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = TP_Init &rArr; TP_Adjust &rArr; TP_Get_Adjdata &rArr; open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach_device
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_XY
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> touch_screen.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[430]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[431]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1e7]"></a>RCC_HSEConfig</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1e8]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[1e9]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1ea]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1eb]"></a>RCC_HSICmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1ec]"></a>RCC_PLLConfig</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1ed]"></a>RCC_PLLCmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1ee]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[432]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ef]"></a>RCC_HCLKConfig</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f0]"></a>RCC_PCLK1Config</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f1]"></a>RCC_PCLK2Config</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f2]"></a>RCC_ITConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f3]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f4]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f5]"></a>RCC_LSEConfig</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f6]"></a>RCC_LSICmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f7]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1f8]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 208 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2S_Init
</UL>

<P><STRONG><a name="[107]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_AHBPeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_SRAM_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[106]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_SRAM_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_beep_door_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach_device
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RCC_Configuration
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_attach_device
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_attach_device
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_exti_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[12d]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RCC_Configuration
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[1f9]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[1fa]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DeInit
</UL>

<P><STRONG><a name="[1fb]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1fc]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1fd]"></a>RCC_MCOConfig</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[433]"></a>RCC_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>RCC_GetITStatus</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1ff]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[434]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[179]"></a>EXTI_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_exti_init
</UL>

<P><STRONG><a name="[435]"></a>EXTI_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_exti.o(.text), UNUSED)

<P><STRONG><a name="[200]"></a>EXTI_GenerateSWInterrupt</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[201]"></a>EXTI_GetFlagStatus</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f10x_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[202]"></a>EXTI_ClearFlag</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_exti.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[17e]"></a>EXTI_GetITStatus</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[17f]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_exti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EXTI_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
</UL>

<P><STRONG><a name="[203]"></a>FSMC_NORSRAMDeInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[204]"></a>FSMC_NANDDeInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[436]"></a>FSMC_PCCARDDeInit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 898 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FSMC_NORSRAMInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_SRAM_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[205]"></a>FSMC_NANDInit</STRONG> (Thumb, 512 bytes, Stack size 24 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[206]"></a>FSMC_PCCARDInit</STRONG> (Thumb, 462 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[437]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[438]"></a>FSMC_NANDStructInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[439]"></a>FSMC_PCCARDStructInit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[10a]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FSMC_NORSRAMCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_SRAM_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
</UL>

<P><STRONG><a name="[207]"></a>FSMC_NANDCmd</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[208]"></a>FSMC_PCCARDCmd</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[209]"></a>FSMC_NANDECCCmd</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[43a]"></a>FSMC_GetECC</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>FSMC_ITConfig</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[20b]"></a>FSMC_GetFlagStatus</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[20c]"></a>FSMC_ClearFlag</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[20d]"></a>FSMC_GetITStatus</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[20e]"></a>FSMC_ClearITPendingBit</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[20f]"></a>TIM_DeInit</STRONG> (Thumb, 536 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[184]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 308 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_TimeBaseInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[187]"></a>TIM_OC1Init</STRONG> (Thumb, 576 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_OC1Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[188]"></a>TIM_OC2Init</STRONG> (Thumb, 438 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = TIM_OC2Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[210]"></a>TIM_OC3Init</STRONG> (Thumb, 458 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[211]"></a>TIM_OC4Init</STRONG> (Thumb, 302 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[212]"></a>TIM_SetIC4Prescaler</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[213]"></a>TIM_SetIC3Prescaler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[214]"></a>TIM_SetIC2Prescaler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[215]"></a>TIM_SetIC1Prescaler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[216]"></a>TIM_ICInit</STRONG> (Thumb, 600 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC3Prescaler
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC4Prescaler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI3_Config
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI4_Config
</UL>

<P><STRONG><a name="[21b]"></a>TIM_PWMIConfig</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC1Prescaler
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetIC2Prescaler
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[21c]"></a>TIM_BDTRConfig</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[43b]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[43c]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[43d]"></a>TIM_ICStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[43e]"></a>TIM_BDTRStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(.text), UNUSED)

<P><STRONG><a name="[189]"></a>TIM_Cmd</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[21d]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[21e]"></a>TIM_ITConfig</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[21f]"></a>TIM_GenerateEvent</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[220]"></a>TIM_DMAConfig</STRONG> (Thumb, 358 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[221]"></a>TIM_DMACmd</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[222]"></a>TIM_InternalClockConfig</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[223]"></a>TIM_SelectInputTrigger</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRxExternalClockConfig
</UL>

<P><STRONG><a name="[224]"></a>TIM_ITRxExternalClockConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
</UL>

<P><STRONG><a name="[225]"></a>TIM_TIxExternalClockConfig</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SelectInputTrigger
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI1_Config
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TI2_Config
</UL>

<P><STRONG><a name="[226]"></a>TIM_ETRConfig</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode2Config
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRClockMode1Config
</UL>

<P><STRONG><a name="[227]"></a>TIM_ETRClockMode1Config</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[228]"></a>TIM_ETRClockMode2Config</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETRConfig
</UL>

<P><STRONG><a name="[229]"></a>TIM_PrescalerConfig</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[22a]"></a>TIM_CounterModeConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[22b]"></a>TIM_EncoderInterfaceConfig</STRONG> (Thumb, 212 bytes, Stack size 32 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[22c]"></a>TIM_ForcedOC1Config</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[22d]"></a>TIM_ForcedOC2Config</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[22e]"></a>TIM_ForcedOC3Config</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[22f]"></a>TIM_ForcedOC4Config</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[230]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[231]"></a>TIM_SelectCOM</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[232]"></a>TIM_SelectCCDMA</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[233]"></a>TIM_CCPreloadControl</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[185]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC1PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[186]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_OC2PreloadConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[234]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[235]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[236]"></a>TIM_OC1FastConfig</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[237]"></a>TIM_OC2FastConfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[238]"></a>TIM_OC3FastConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[239]"></a>TIM_OC4FastConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23a]"></a>TIM_ClearOC1Ref</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23b]"></a>TIM_ClearOC2Ref</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23c]"></a>TIM_ClearOC3Ref</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23d]"></a>TIM_ClearOC4Ref</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23e]"></a>TIM_OC1PolarityConfig</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[23f]"></a>TIM_OC1NPolarityConfig</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[240]"></a>TIM_OC2PolarityConfig</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[241]"></a>TIM_OC2NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[242]"></a>TIM_OC3PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[243]"></a>TIM_OC3NPolarityConfig</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[244]"></a>TIM_OC4PolarityConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[245]"></a>TIM_CCxCmd</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[246]"></a>TIM_CCxNCmd</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[247]"></a>TIM_SelectOCxM</STRONG> (Thumb, 326 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[248]"></a>TIM_UpdateDisableConfig</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[249]"></a>TIM_UpdateRequestConfig</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[24a]"></a>TIM_SelectHallSensor</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[24b]"></a>TIM_SelectOnePulseMode</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[24c]"></a>TIM_SelectOutputTrigger</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[24d]"></a>TIM_SelectSlaveMode</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[24e]"></a>TIM_SelectMasterSlaveMode</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[24f]"></a>TIM_SetCounter</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[250]"></a>TIM_SetAutoreload</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[181]"></a>TIM_SetCompare1</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetCompare1 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_led
</UL>

<P><STRONG><a name="[180]"></a>TIM_SetCompare2</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TIM_SetCompare2 &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_led
</UL>

<P><STRONG><a name="[251]"></a>TIM_SetCompare3</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[252]"></a>TIM_SetCompare4</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[253]"></a>TIM_SetClockDivision</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[254]"></a>TIM_GetCapture1</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[255]"></a>TIM_GetCapture2</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[256]"></a>TIM_GetCapture3</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[257]"></a>TIM_GetCapture4</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[258]"></a>TIM_GetCounter</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[259]"></a>TIM_GetPrescaler</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25a]"></a>TIM_GetFlagStatus</STRONG> (Thumb, 206 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25b]"></a>TIM_ClearFlag</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25c]"></a>TIM_GetITStatus</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[25d]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1a1]"></a>SPI_I2S_DeInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SPI_I2S_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[1a2]"></a>SPI_Init</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[25e]"></a>I2S_Init</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>

<P><STRONG><a name="[1a0]"></a>SPI_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[43f]"></a>I2S_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_spi.o(.text), UNUSED)

<P><STRONG><a name="[1a3]"></a>SPI_Cmd</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[260]"></a>I2S_Cmd</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[261]"></a>SPI_I2S_ITConfig</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[262]"></a>SPI_I2S_DMACmd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1a6]"></a>SPI_I2S_SendData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_I2S_SendData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[1a7]"></a>SPI_I2S_ReceiveData</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SPI_I2S_ReceiveData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[263]"></a>SPI_NSSInternalSoftwareConfig</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[264]"></a>SPI_SSOutputCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[265]"></a>SPI_DataSizeConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[266]"></a>SPI_TransmitCRC</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1a4]"></a>SPI_CalculateCRC</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_CalculateCRC &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;configure
</UL>

<P><STRONG><a name="[267]"></a>SPI_GetCRC</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[268]"></a>SPI_GetCRCPolynomial</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[269]"></a>SPI_BiDirectionalLineConfig</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[1a5]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SPI_I2S_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
</UL>

<P><STRONG><a name="[26a]"></a>SPI_I2S_ClearFlag</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26b]"></a>SPI_I2S_GetITStatus</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26c]"></a>SPI_I2S_ClearITPendingBit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_spi.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[144]"></a>SDIO_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[13f]"></a>SDIO_Init</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[440]"></a>SDIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>SDIO_ClockCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[140]"></a>SDIO_SetPowerState</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_SetPowerState &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerOFF
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[137]"></a>SDIO_GetPowerState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[150]"></a>SDIO_ITConfig</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[14e]"></a>SDIO_DMACmd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[138]"></a>SDIO_SendCommand</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_SendCommand &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[441]"></a>SDIO_CmdStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>SDIO_GetCommandResponse</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
</UL>

<P><STRONG><a name="[135]"></a>SDIO_GetResponse</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[147]"></a>SDIO_DataConfig</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_DataConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[442]"></a>SDIO_DataStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[443]"></a>SDIO_GetDataCounter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>SDIO_ReadData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[157]"></a>SDIO_WriteData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[444]"></a>SDIO_GetFIFOCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_sdio.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>SDIO_StartSDIOReadWait</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26e]"></a>SDIO_StopSDIOReadWait</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[26f]"></a>SDIO_SetSDIOReadWaitMode</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[270]"></a>SDIO_SetSDIOOperation</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[271]"></a>SDIO_SendSDIOSuspendCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[272]"></a>SDIO_CommandCompletionCmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[273]"></a>SDIO_CEATAITCmd</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[274]"></a>SDIO_SendCEATACmd</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[13d]"></a>SDIO_GetFlagStatus</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[132]"></a>SDIO_ClearFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsCardProgramming
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdError
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp7Error
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp3Error
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp6Error
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp2Error
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[15e]"></a>SDIO_GetITStatus</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDIO_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[15f]"></a>SDIO_ClearITPendingBit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_sdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SDIO_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ProcessIRQSrc
</UL>

<P><STRONG><a name="[275]"></a>GPIO_DeInit</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[276]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[108]"></a>GPIO_Init</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_init
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXT_SRAM_Configuration
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sram_init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_GPIO_Init
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_beep_door_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach_device
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Configuration
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_attach_device
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_attach_device
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[445]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[277]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[278]"></a>GPIO_ReadInputData</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[279]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 260 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27a]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[113]"></a>GPIO_SetBits</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_on
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach_device
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GPIO_Configuration
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_attach_device
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_attach_device
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[115]"></a>GPIO_ResetBits</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_ResetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_led_off
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xfer
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[27b]"></a>GPIO_WriteBit</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27c]"></a>GPIO_Write</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27d]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27e]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[27f]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[183]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = GPIO_PinRemapConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_spi_bus_init
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_led_init
</UL>

<P><STRONG><a name="[178]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPIO_EXTILineConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_exti_init
</UL>

<P><STRONG><a name="[280]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[281]"></a>USART_DeInit</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[117]"></a>USART_Init</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[446]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[282]"></a>USART_ClockInit</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[447]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[118]"></a>USART_Cmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[11a]"></a>USART_ITConfig</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[11f]"></a>USART_DMACmd</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_DMACmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[283]"></a>USART_SetAddress</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[284]"></a>USART_WakeUpConfig</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[285]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[286]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[287]"></a>USART_LINCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[288]"></a>USART_SendData</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[125]"></a>USART_ReceiveData</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = USART_ReceiveData &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
</UL>

<P><STRONG><a name="[289]"></a>USART_SendBreak</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28a]"></a>USART_SetGuardTime</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28b]"></a>USART_SetPrescaler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28c]"></a>USART_SmartCardCmd</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28d]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28e]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[28f]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[290]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[291]"></a>USART_IrDAConfig</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[292]"></a>USART_IrDACmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[12b]"></a>USART_GetFlagStatus</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[293]"></a>USART_ClearFlag</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[129]"></a>USART_GetITStatus</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[12a]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USART_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[11b]"></a>DMA_DeInit</STRONG> (Thumb, 430 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DMA_DeInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[11c]"></a>DMA_Init</STRONG> (Thumb, 388 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[448]"></a>DMA_StructInit</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_dma.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>DMA_Cmd</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[11e]"></a>DMA_ITConfig</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[127]"></a>DMA_SetCurrDataCounter</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_SetCurrDataCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
</UL>

<P><STRONG><a name="[123]"></a>DMA_GetCurrDataCounter</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DMA_GetCurrDataCounter &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
</UL>

<P><STRONG><a name="[152]"></a>DMA_GetFlagStatus</STRONG> (Thumb, 346 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = DMA_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[11d]"></a>DMA_ClearFlag</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DMA_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_TxConfiguration
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_RxConfiguration
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>

<P><STRONG><a name="[294]"></a>DMA_GetITStatus</STRONG> (Thumb, 396 bytes, Stack size 16 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[295]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_dma.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[296]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[121]"></a>NVIC_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_exti_init
</UL>

<P><STRONG><a name="[104]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[297]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[298]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[449]"></a>rt_system_tick_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, clock.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>

<P><STRONG><a name="[299]"></a>rt_tick_set</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, clock.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[10c]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[dd]"></a>rt_tick_from_millisecond</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_thread_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_thread_entry
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_thread_entry
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_thread_entry
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC522
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[110]"></a>rt_components_board_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_board_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[d0]"></a>rt_components_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, components.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_components_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[17c]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = rt_device_find &rArr; rt_strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_esp8266
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[169]"></a>rt_device_register</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_device_register &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>

<P><STRONG><a name="[2a2]"></a>rt_device_unregister</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[44a]"></a>rt_device_init_all</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, device.o(.text), UNUSED)

<P><STRONG><a name="[2a4]"></a>rt_device_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[2a5]"></a>rt_device_open</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_device_open &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[2a6]"></a>rt_device_close</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[2a7]"></a>rt_device_read</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2a9]"></a>rt_device_write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rt_device_write &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>

<P><STRONG><a name="[2aa]"></a>rt_device_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_device_control &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[2ab]"></a>rt_device_set_rx_indicate</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, device.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_device_set_rx_indicate &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[2ac]"></a>rt_device_set_tx_complete</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, device.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[2ad]"></a>rt_thread_idle_excute</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[fc]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[44b]"></a>rt_thread_idle_gethandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, idle.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_sem_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[2b9]"></a>rt_sem_detach</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2ba]"></a>rt_sem_create</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2bc]"></a>rt_sem_delete</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[161]"></a>rt_sem_take</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_trytake
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2c0]"></a>rt_sem_trytake</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
</UL>

<P><STRONG><a name="[163]"></a>rt_sem_release</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_read
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
</UL>

<P><STRONG><a name="[2c2]"></a>rt_sem_control</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2c3]"></a>rt_mutex_init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_mutex_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
</UL>

<P><STRONG><a name="[2c4]"></a>rt_mutex_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2c5]"></a>rt_mutex_create</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>

<P><STRONG><a name="[2c6]"></a>rt_mutex_delete</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
</UL>

<P><STRONG><a name="[2c7]"></a>rt_mutex_take</STRONG> (Thumb, 482 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>

<P><STRONG><a name="[2c9]"></a>rt_mutex_release</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>

<P><STRONG><a name="[44c]"></a>rt_mutex_control</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ipc.o(.text), UNUSED)

<P><STRONG><a name="[e1]"></a>rt_event_init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_event_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
</UL>

<P><STRONG><a name="[2ca]"></a>rt_event_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2cb]"></a>rt_event_create</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2cc]"></a>rt_event_delete</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[ee]"></a>rt_event_send</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_event_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_card_event
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_thread_entry
</UL>

<P><STRONG><a name="[ff]"></a>rt_event_recv</STRONG> (Thumb, 394 bytes, Stack size 56 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_event_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
</UL>

<P><STRONG><a name="[2cd]"></a>rt_event_control</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2ce]"></a>rt_mb_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[2d0]"></a>rt_mb_detach</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2d1]"></a>rt_mb_create</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2d2]"></a>rt_mb_delete</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2d3]"></a>rt_mb_send_wait</STRONG> (Thumb, 356 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[2d4]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>

<P><STRONG><a name="[2d5]"></a>rt_mb_recv</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2d6]"></a>rt_mb_control</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2d7]"></a>rt_mq_init</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[2d8]"></a>rt_mq_detach</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2d9]"></a>rt_mq_delete</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[2da]"></a>rt_mq_create</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2db]"></a>rt_mq_send</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2dc]"></a>rt_mq_urgent</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2dd]"></a>rt_mq_recv</STRONG> (Thumb, 476 bytes, Stack size 56 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[2de]"></a>rt_mq_control</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ipc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[10b]"></a>rt_interrupt_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>rt_interrupt_leave</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_IRQHandler
</UL>

<P><STRONG><a name="[2ae]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[2df]"></a>rt_get_errno</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[2a8]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>

<P><STRONG><a name="[2e0]"></a>_rt_errno</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[ea]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_del_get_one_user
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_spi_transmit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
</UL>

<P><STRONG><a name="[162]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_read
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[3c0]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[2e3]"></a>rt_memcmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
</UL>

<P><STRONG><a name="[2e2]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strstr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>

<P><STRONG><a name="[2e1]"></a>rt_strstr</STRONG> (Thumb, 58 bytes, Stack size 20 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcmp
</UL>

<P><STRONG><a name="[44d]"></a>rt_strcasecmp</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[2f1]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[29f]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
</UL>

<P><STRONG><a name="[44e]"></a>rt_strcmp</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[44f]"></a>rt_strnlen</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[2e4]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
</UL>

<P><STRONG><a name="[2e8]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[2e5]"></a>rt_vsnprintf</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[d2]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_write
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_read
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_time
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_get_card_event
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_check_thread_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_thread_entry
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_thread_entry
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_name
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_addr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_led
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getcwd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mem
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[f6]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[2e9]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>

<P><STRONG><a name="[2ea]"></a>rt_vsprintf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sprintf
</UL>

<P><STRONG><a name="[2eb]"></a>rt_sprintf</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsprintf
</UL>

<P><STRONG><a name="[3bf]"></a>rt_console_get_device</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[10f]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_console_set_device &rArr; rt_device_close &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[2ec]"></a>rt_malloc_align</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>

<P><STRONG><a name="[2ed]"></a>rt_free_align</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, kservice.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[2f7]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[450]"></a>rt_assert_set_hook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, kservice.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sdcard_control
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer_message
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_configure
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_partition
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_tx_complete
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_cpu_shutdown
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_echo
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_echo
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_get_device
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_rx_ind
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_release_bus
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_take_bus
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_recv
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_send_then_send
</UL>

<P><STRONG><a name="[f8]"></a>rt_system_heap_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_system_heap_init &rArr; rt_sem_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[166]"></a>rt_malloc</STRONG> (Thumb, 498 bytes, Stack size 32 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc_align
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_append
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_append
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[168]"></a>rt_free</STRONG> (Thumb, 628 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free_align
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[2ef]"></a>rt_realloc</STRONG> (Thumb, 312 bytes, Stack size 40 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
</UL>

<P><STRONG><a name="[2f0]"></a>rt_calloc</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, mem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[451]"></a>rt_memory_info</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, mem.o(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>list_mem</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = list_mem &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mem.o(FSymTab)
</UL>
<P><STRONG><a name="[452]"></a>rt_system_object_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[453]"></a>rt_object_get_information</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, object.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>rt_object_init</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[2a3]"></a>rt_object_detach</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_unregister
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2bb]"></a>rt_object_allocate</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
</UL>

<P><STRONG><a name="[2b1]"></a>rt_object_delete</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
</UL>

<P><STRONG><a name="[2b0]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[2f4]"></a>rt_object_find</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, object.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>

<P><STRONG><a name="[f9]"></a>rt_system_scheduler_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[fd]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[2bf]"></a>rt_schedule</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[2fb]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[2fc]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[29e]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[2a0]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = rt_exit_critical &rArr;  rt_schedule (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[454]"></a>rt_critical_level</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, scheduler.o(.text), UNUSED)

<P><STRONG><a name="[2fd]"></a>rt_thread_exit</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[300]"></a>rt_thread_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>rt_thread_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[29b]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_errno
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_get_errno
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_find
</UL>

<P><STRONG><a name="[2b6]"></a>rt_thread_resume</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[d4]"></a>rt_thread_startup</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_init_thread_entry
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[306]"></a>rt_thread_detach</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>

<P><STRONG><a name="[d3]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[307]"></a>rt_thread_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[29c]"></a>rt_thread_yield</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[2b3]"></a>rt_thread_suspend</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[308]"></a>rt_thread_sleep</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>

<P><STRONG><a name="[de]"></a>rt_thread_delay</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open_door
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_thread_entry
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_thread_entry
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_thread_entry
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TFTLCD_Init
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;touch_screen_thread_entry
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_RC522
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PcdReset
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;M500PcdConfigISOType
</UL>

<P><STRONG><a name="[2c8]"></a>rt_thread_control</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[309]"></a>rt_thread_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, thread.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>

<P><STRONG><a name="[304]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[2fe]"></a>rt_timer_detach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[30f]"></a>rt_timer_create</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[310]"></a>rt_timer_delete</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>

<P><STRONG><a name="[2be]"></a>rt_timer_start</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[305]"></a>rt_timer_stop</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>

<P><STRONG><a name="[2bd]"></a>rt_timer_control</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_timer_control &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
</UL>

<P><STRONG><a name="[29d]"></a>rt_timer_check</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[312]"></a>rt_timer_next_timeout_tick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[fa]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[fb]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[303]"></a>rt_hw_stack_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[455]"></a>rt_hw_exception_install</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cpuport.o(.text), UNUSED)

<P><STRONG><a name="[317]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[318]"></a>rt_hw_cpu_shutdown</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cpuport.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[fe]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[29a]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_set
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_sleep
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_find
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_calloc
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[2f9]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2fa]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f8]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[456]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>dfs_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dfs_init &rArr; rt_mutex_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[319]"></a>dfs_lock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dfs_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[31a]"></a>dfs_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_get_mounted_path
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[31b]"></a>fd_new</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fd_new &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[31c]"></a>fd_get</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[31d]"></a>fd_put</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = fd_put &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;telldir
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fstat
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
</UL>

<P><STRONG><a name="[31e]"></a>dfs_normalize_path</STRONG> (Thumb, 352 bytes, Stack size 40 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[320]"></a>fd_is_open</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[323]"></a>dfs_subdir</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, dfs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_subdir
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>

<P><STRONG><a name="[324]"></a>dfs_file_open</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[325]"></a>dfs_file_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dfs_file_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;closedir
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;opendir
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[33e]"></a>dfs_file_ioctl</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ioctl
</UL>

<P><STRONG><a name="[32a]"></a>dfs_file_read</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_read
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cat
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[329]"></a>dfs_file_getdents</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_getdents
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readdir
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[326]"></a>dfs_file_unlink</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rmdir
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlink
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rm
</UL>

<P><STRONG><a name="[32c]"></a>dfs_file_write</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_write
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
</UL>

<P><STRONG><a name="[33c]"></a>dfs_file_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
</UL>

<P><STRONG><a name="[336]"></a>dfs_file_lseek</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = dfs_file_lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rewinddir
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;seekdir
</UL>

<P><STRONG><a name="[327]"></a>dfs_file_stat</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stat
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ls
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[328]"></a>dfs_file_rename</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, dfs_file.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rename
</UL>

<P><STRONG><a name="[ba]"></a>ls</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = ls &rArr; dfs_file_stat &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[bb]"></a>rm</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = rm &rArr; dfs_file_unlink &rArr; fd_is_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[bc]"></a>cat</STRONG> (Thumb, 80 bytes, Stack size 96 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = cat &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[bd]"></a>copy</STRONG> (Thumb, 630 bytes, Stack size 40 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = copy &rArr; copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_file.o(FSymTab)
</UL>
<P><STRONG><a name="[330]"></a>dfs_register</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_init
</UL>

<P><STRONG><a name="[321]"></a>dfs_filesystem_lookup</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
</UL>

<P><STRONG><a name="[332]"></a>dfs_filesystem_get_mounted_path</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
</UL>

<P><STRONG><a name="[167]"></a>dfs_filesystem_get_partition</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = dfs_filesystem_get_partition &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_sdcard_init
</UL>

<P><STRONG><a name="[d1]"></a>dfs_mount</STRONG> (Thumb, 400 bytes, Stack size 88 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dfs_mount &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[333]"></a>dfs_unmount</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, dfs_fs.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>

<P><STRONG><a name="[334]"></a>dfs_mkfs</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unlock
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_lock
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkfs
</UL>

<P><STRONG><a name="[335]"></a>dfs_statfs</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;statfs
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;df
</UL>

<P><STRONG><a name="[be]"></a>mkfs</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = mkfs &rArr; dfs_mkfs &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[bf]"></a>df</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, dfs_fs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = df &rArr; dfs_statfs &rArr; dfs_filesystem_lookup &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_fs.o(FSymTab)
</UL>
<P><STRONG><a name="[d7]"></a>open</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = open &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_state
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_del_get_one_user
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num_max
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_name
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_addr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
</UL>

<P><STRONG><a name="[d8]"></a>close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = close &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_state
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_del_get_one_user
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num_max
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_name
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_addr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
</UL>

<P><STRONG><a name="[da]"></a>read</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = read &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_state
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_del_get_one_user
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num_max
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_name
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_addr
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Get_Adjdata
</UL>

<P><STRONG><a name="[db]"></a>write</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = write &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_state
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_del_get_one_user
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num_max
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_name
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_addr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Save_Adjdata
</UL>

<P><STRONG><a name="[d9]"></a>lseek</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = lseek &rArr; fd_get &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_state
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_del_get_one_user
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num_max
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_user_num
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_card_array
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_name
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_set_device_addr
</UL>

<P><STRONG><a name="[337]"></a>rename</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_rename
</UL>

<P><STRONG><a name="[338]"></a>unlink</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[339]"></a>stat</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
</UL>

<P><STRONG><a name="[33a]"></a>fstat</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[33b]"></a>fsync</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_flush
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[33d]"></a>ioctl</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_ioctl
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[33f]"></a>statfs</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_statfs
</UL>

<P><STRONG><a name="[c0]"></a>mkdir</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, dfs_posix.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = mkdir &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_posix.o(FSymTab)
</UL>
<P><STRONG><a name="[340]"></a>rmdir</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_unlink
</UL>

<P><STRONG><a name="[341]"></a>opendir</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_new
</UL>

<P><STRONG><a name="[342]"></a>readdir</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[343]"></a>telldir</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[344]"></a>seekdir</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[345]"></a>rewinddir</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_lseek
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[346]"></a>closedir</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_put
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_get
</UL>

<P><STRONG><a name="[347]"></a>getcwd</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, dfs_posix.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[6c]"></a>dfs_elm_mount</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = dfs_elm_mount &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>dfs_elm_unmount</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dfs_elm_unmount &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>dfs_elm_mkfs</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = dfs_elm_mkfs &rArr; f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_disk
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>dfs_elm_statfs</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = dfs_elm_statfs &rArr; f_getfree &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>dfs_elm_open</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = dfs_elm_open &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>dfs_elm_close</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = dfs_elm_close &rArr; f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>dfs_elm_ioctl</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>dfs_elm_read</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = dfs_elm_read &rArr; f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>dfs_elm_write</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dfs_elm_write &rArr; f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>dfs_elm_flush</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dfs_elm_flush &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>dfs_elm_lseek</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = dfs_elm_lseek &rArr; f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>dfs_elm_getdents</STRONG> (Thumb, 244 bytes, Stack size 72 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = dfs_elm_getdents &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>dfs_elm_unlink</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = dfs_elm_unlink &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>dfs_elm_rename</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dfs_elm_rename &rArr; f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>dfs_elm_stat</STRONG> (Thumb, 316 bytes, Stack size 136 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = dfs_elm_stat &rArr; f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_get_vol
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elm_result_to_dfs
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>elm_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = elm_init &rArr; dfs_register &rArr; dfs_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dfs_elm.o(.rti_fn.4)
</UL>
<P><STRONG><a name="[386]"></a>disk_initialize</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[385]"></a>disk_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[35d]"></a>disk_read</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[35e]"></a>disk_write</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disk_write &rArr; rt_device_write &rArr;  rt_assert_handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[35f]"></a>disk_ioctl</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = disk_ioctl &rArr; rt_device_control &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[388]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[360]"></a>ff_cre_syncobj</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[361]"></a>ff_del_syncobj</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ff_del_syncobj &rArr; rt_mutex_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[362]"></a>ff_req_grant</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
</UL>

<P><STRONG><a name="[363]"></a>ff_rel_grant</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[364]"></a>ff_memalloc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = ff_memalloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[365]"></a>ff_memfree</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dfs_elm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ff_memfree &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[370]"></a>clust2sect</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[36b]"></a>get_fat</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = get_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[36c]"></a>put_fat</STRONG> (Thumb, 384 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[374]"></a>gen_numname</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = gen_numname &rArr; mem_cpy
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[349]"></a>f_mount</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_mount &rArr; ff_cre_syncobj &rArr; rt_mutex_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_del_syncobj
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_cre_syncobj
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[350]"></a>f_open</STRONG> (Thumb, 412 bytes, Stack size 96 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[353]"></a>f_read</STRONG> (Thumb, 604 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_read &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
</UL>

<P><STRONG><a name="[354]"></a>f_write</STRONG> (Thumb, 670 bytes, Stack size 64 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = f_write &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
</UL>

<P><STRONG><a name="[355]"></a>f_sync</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
</UL>

<P><STRONG><a name="[352]"></a>f_close</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = f_close &rArr; f_sync &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
</UL>

<P><STRONG><a name="[351]"></a>f_lseek</STRONG> (Thumb, 912 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = f_lseek &rArr; validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[34a]"></a>f_opendir</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[357]"></a>f_readdir</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
</UL>

<P><STRONG><a name="[356]"></a>f_seekdir</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = f_seekdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
</UL>

<P><STRONG><a name="[35a]"></a>f_stat</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = f_stat &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[34d]"></a>f_getfree</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = f_getfree &rArr; chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
</UL>

<P><STRONG><a name="[38a]"></a>f_truncate</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
</UL>

<P><STRONG><a name="[358]"></a>f_unlink</STRONG> (Thumb, 218 bytes, Stack size 112 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
</UL>

<P><STRONG><a name="[34f]"></a>f_mkdir</STRONG> (Thumb, 434 bytes, Stack size 88 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = f_mkdir &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[38b]"></a>f_chmod</STRONG> (Thumb, 128 bytes, Stack size 88 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[38c]"></a>f_utime</STRONG> (Thumb, 128 bytes, Stack size 80 bytes, ff.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>

<P><STRONG><a name="[359]"></a>f_rename</STRONG> (Thumb, 336 bytes, Stack size 144 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = f_rename &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unlock_fs
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
</UL>

<P><STRONG><a name="[34c]"></a>f_mkfs</STRONG> (Thumb, 1598 bytes, Stack size 96 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = f_mkfs &rArr; disk_ioctl &rArr; rt_device_control &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
</UL>

<P><STRONG><a name="[34e]"></a>elm_get_vol</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
</UL>

<P><STRONG><a name="[37f]"></a>ff_convert</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, ccsbcs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[373]"></a>ff_wtoupper</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, ccsbcs.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
</UL>

<P><STRONG><a name="[130]"></a>rt_hw_serial_register</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_hw_serial_register &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[124]"></a>rt_hw_serial_isr</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_put_index
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_rx_done_isr
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
</UL>

<P><STRONG><a name="[1aa]"></a>rt_spi_bus_register</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_spi_bus_register &rArr; rt_mutex_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_spi_bus_init
</UL>

<P><STRONG><a name="[17b]"></a>rt_spi_bus_attach_device</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_spi_bus_attach_device &rArr; rt_spidev_device_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spidev_device_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tp_attach_device
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc522_attach_device
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_attach_device
</UL>

<P><STRONG><a name="[17d]"></a>rt_spi_configure</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_spi_configure &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_esp8266
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitRC522
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Init
</UL>

<P><STRONG><a name="[39f]"></a>rt_spi_send_then_send</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[3a0]"></a>rt_spi_send_then_recv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[3a1]"></a>rt_spi_transfer</STRONG> (Thumb, 198 bytes, Stack size 48 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_spi_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_write
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spidev_device_read
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_write
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spi_bus_device_read
</UL>

<P><STRONG><a name="[175]"></a>rt_spi_transfer_message</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, spi_core.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_spi_transfer_message &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Read_AD
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadRawRC
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteRawRC
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;esp8266_spi_transmit
</UL>

<P><STRONG><a name="[3a2]"></a>rt_spi_take_bus</STRONG> (Thumb, 204 bytes, Stack size 16 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>

<P><STRONG><a name="[3a3]"></a>rt_spi_release_bus</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[3a4]"></a>rt_spi_take</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>

<P><STRONG><a name="[3a5]"></a>rt_spi_release</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, spi_core.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>

<P><STRONG><a name="[39d]"></a>rt_spi_bus_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_spi_bus_device_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_register
</UL>

<P><STRONG><a name="[39e]"></a>rt_spidev_device_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_spidev_device_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_bus_attach_device
</UL>

<P><STRONG><a name="[392]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[39b]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[398]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[391]"></a>rt_data_queue_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[39c]"></a>rt_data_queue_push</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[399]"></a>rt_data_queue_pop</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[39a]"></a>rt_data_queue_peak</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dataqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[3aa]"></a>rt_data_queue_reset</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, dataqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>

<P><STRONG><a name="[3ab]"></a>finsh_set_device</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[3ac]"></a>finsh_get_device</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[3ad]"></a>finsh_set_echo</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[3ae]"></a>finsh_get_echo</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, shell.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>

<P><STRONG><a name="[3b1]"></a>finsh_run_line</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_vm_run
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_stack_bottom
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_string
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_errno
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3bd]"></a>finsh_thread_entry</STRONG> (Thumb, 1646 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = finsh_thread_entry &rArr; finsh_run_line &rArr; finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_get_device
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_set_rx_indicate
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_read
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_handle_history
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[3c1]"></a>finsh_system_function_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[3c2]"></a>finsh_system_var_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, shell.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
</UL>

<P><STRONG><a name="[b0]"></a>finsh_system_init</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = finsh_system_init &rArr; rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_var_init
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_function_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.rti_fn.3)
</UL>
<P><STRONG><a name="[c1]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c2]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c3]"></a>list_thread</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c4]"></a>list_sem</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_sem &rArr; _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c5]"></a>list_event</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_event &rArr; _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c6]"></a>list_mutex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_mutex &rArr; _list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c7]"></a>list_mailbox</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = list_mailbox &rArr; _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c8]"></a>list_msgqueue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_msgqueue &rArr; _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c9]"></a>list_mempool</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = list_mempool &rArr; _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ca]"></a>list_timer</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_timer &rArr; _list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[cb]"></a>list_device</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = list_device &rArr; _list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[cc]"></a>list</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[3b0]"></a>list_prefix</STRONG> (Thumb, 978 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_common
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_is_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_auto_complete
</UL>

<P><STRONG><a name="[3b4]"></a>finsh_compiler_run</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = finsh_compiler_run &rArr; finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[3e2]"></a>finsh_error_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[3d5]"></a>finsh_error_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>

<P><STRONG><a name="[3b3]"></a>finsh_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[3b5]"></a>finsh_error_string</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, finsh_error.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[3d7]"></a>finsh_heap_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_heap_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[3d8]"></a>finsh_heap_free</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_merge
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
</UL>

<P><STRONG><a name="[3dd]"></a>finsh_heap_allocate</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_gc
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_split
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_remove
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[3be]"></a>finsh_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_init &rArr; finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3b7]"></a>finsh_stack_bottom</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, finsh_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[3b8]"></a>finsh_flush</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, finsh_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_flush &rArr; finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[3e3]"></a>finsh_reset</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, finsh_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_init
</UL>

<P><STRONG><a name="[3e0]"></a>finsh_node_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_node_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[3e8]"></a>finsh_node_allocate</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, finsh_node.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[3e4]"></a>finsh_node_new_id</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = finsh_node_new_id &rArr; finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[3e9]"></a>finsh_node_new_char</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_char
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[3ea]"></a>finsh_node_new_int</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_int
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[3eb]"></a>finsh_node_new_long</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_long
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[3ec]"></a>finsh_node_new_string</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = finsh_node_new_string &rArr; finsh_heap_allocate &rArr; finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[3ee]"></a>finsh_node_new_ptr</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, finsh_node.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_node_new_ptr
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[7b]"></a>OP_no_op</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>OP_add_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>OP_add_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>OP_add_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>OP_sub_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>OP_sub_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>OP_sub_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>OP_div_byte</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>OP_div_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>OP_div_dword</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>OP_mod_byte</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>OP_mod_word</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>OP_mod_dword</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>OP_mul_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>OP_mul_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>OP_mul_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>OP_and_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>OP_and_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>OP_and_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>OP_or_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>OP_or_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>OP_or_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>OP_xor_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>OP_xor_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>OP_xor_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>OP_bw_byte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>OP_bw_word</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>OP_bw_dword</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>OP_shl_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>OP_shl_word</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>OP_shl_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>OP_shr_byte</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>OP_shr_word</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>OP_shr_dword</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>OP_ld_byte</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>OP_ld_word</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>OP_ld_dword</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>OP_ld_value_byte</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>OP_ld_value_byte_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>OP_ld_value_word</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>OP_ld_value_word_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>OP_ld_value_dword</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>OP_ld_value_dword_stack</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>OP_st_byte</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>OP_st_word</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>OP_st_dword</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>OP_pop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, finsh_ops.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>OP_call</STRONG> (Thumb, 906 bytes, Stack size 152 bytes, finsh_ops.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = OP_call
</UL>
<BR>[Address Reference Count : 1]<UL><LI> finsh_ops.o(.constdata)
</UL>
<P><STRONG><a name="[3b2]"></a>finsh_parser_run</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = finsh_parser_run &rArr; proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[3df]"></a>finsh_parser_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_parser_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_flush
</UL>

<P><STRONG><a name="[3e1]"></a>finsh_var_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_var_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_reset
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_init
</UL>

<P><STRONG><a name="[401]"></a>finsh_var_insert</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_var_insert &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
</UL>

<P><STRONG><a name="[404]"></a>finsh_var_delete</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[3e5]"></a>finsh_var_lookup</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = finsh_var_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[405]"></a>finsh_sysvar_append</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, finsh_var.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[3e6]"></a>finsh_sysvar_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_var.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_sysvar_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[3b6]"></a>finsh_vm_run</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = finsh_vm_run
</UL>
<BR>[Called By]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_run_line
</UL>

<P><STRONG><a name="[406]"></a>finsh_syscall_append</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, finsh_vm.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[3e7]"></a>finsh_syscall_lookup</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_vm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = finsh_syscall_lookup &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
</UL>

<P><STRONG><a name="[403]"></a>finsh_token_init</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = finsh_token_init
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[410]"></a>token_get_string</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = token_get_string &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[3f2]"></a>finsh_token_token</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[413]"></a>finsh_token_get_token</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, finsh_token.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[35c]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
</UL>

<P><STRONG><a name="[3bb]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[3d1]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>

<P><STRONG><a name="[457]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[415]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[458]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[459]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[3bc]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_push_history
</UL>

<P><STRONG><a name="[35b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_init
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_init
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_init
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_init
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_system_init
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_set_device
</UL>

<P><STRONG><a name="[45a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[416]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[3ed]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_get_token
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
</UL>

<P><STRONG><a name="[31f]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_subdir
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[322]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mount
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_mkfs
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_unmount
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_register
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fd_is_open
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
</UL>

<P><STRONG><a name="[331]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_filesystem_lookup
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_delete
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_lookup
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_sysvar_lookup
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_syscall_lookup
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[32f]"></a>strrchr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_path_lastname
</UL>

<P><STRONG><a name="[40e]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[1e2]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[41b]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[1de]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1d5]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[1bf]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1e3]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[1d9]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Scan
</UL>

<P><STRONG><a name="[1c1]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SSD_BackLightSet
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[45b]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1e0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[1e1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>

<P><STRONG><a name="[41d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[45c]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>

<P><STRONG><a name="[418]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[45d]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[419]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[421]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[41c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[422]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[ce]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[45e]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[420]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[45f]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[41e]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[41f]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[424]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[460]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[461]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[462]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[463]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[464]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[465]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[425]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1dd]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TP_Adjust
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4b]"></a>touch_screen_thread_entry</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = touch_screen_thread_entry &rArr; rt_thread_delay &rArr; rt_thread_sleep &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_from_millisecond
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[66]"></a>stm32_configure</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = stm32_configure &rArr; USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>DMA_Configuration</STRONG> (Thumb, 166 bytes, Stack size 64 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = DMA_Configuration &rArr; USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DMACmd
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ITConfig
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[67]"></a>stm32_control</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = stm32_control &rArr; DMA_Configuration &rArr; USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Configuration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>stm32_putc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>stm32_getc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>dma_uart_rx_idle_isr</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_isr
</UL>

<P><STRONG><a name="[126]"></a>dma_rx_done_isr</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dma_rx_done_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetCurrDataCounter
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetCurrDataCounter
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[128]"></a>uart_isr</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = uart_isr &rArr; dma_uart_rx_idle_isr &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_uart_rx_idle_isr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12c]"></a>RCC_Configuration</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RCC_Configuration &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[12e]"></a>GPIO_Configuration</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[12f]"></a>NVIC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[131]"></a>CmdResp2Error</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CmdResp2Error &rArr; SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[133]"></a>CmdResp6Error</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CmdResp6Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_InitializeCards
</UL>

<P><STRONG><a name="[139]"></a>CmdResp3Error</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CmdResp3Error &rArr; SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[13a]"></a>CmdResp1Error</STRONG> (Thumb, 298 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendSDStatus
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendStatus
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_StopTransfer
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SelectDeselect
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[13b]"></a>CmdResp7Error</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = CmdResp7Error &rArr; SDIO_ClearFlag &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[13c]"></a>CmdError</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CmdError &rArr; SDIO_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_PowerON
</UL>

<P><STRONG><a name="[142]"></a>GPIO_Configuration</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Init
</UL>

<P><STRONG><a name="[146]"></a>FindSCR</STRONG> (Thumb, 408 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ReadData
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetFlagStatus
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_DataConfig
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDEnWideBus
</UL>

<P><STRONG><a name="[149]"></a>SDEnWideBus</STRONG> (Thumb, 308 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = SDEnWideBus &rArr; FindSCR &rArr; CmdResp1Error &rArr; SDIO_GetResponse &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindSCR
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CmdResp1Error
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_EnableWideBusOperation
</UL>

<P><STRONG><a name="[14c]"></a>DMA_RxConfiguration</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA_RxConfiguration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[14f]"></a>convert_from_bytes_to_power_of_two</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>

<P><STRONG><a name="[154]"></a>IsCardProgramming</STRONG> (Thumb, 450 bytes, Stack size 24 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = IsCardProgramming &rArr; SDIO_SendCommand &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_SendCommand
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetResponse
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_GetCommandResponse
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDIO_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Erase
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[155]"></a>DMA_TxConfiguration</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = DMA_TxConfiguration &rArr; DMA_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>

<P><STRONG><a name="[50]"></a>rt_sdcard_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_sdcard_init &rArr; rt_sem_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>rt_sdcard_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>rt_sdcard_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdcard.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.text)
</UL>
<P><STRONG><a name="[53]"></a>rt_sdcard_read</STRONG> (Thumb, 222 bytes, Stack size 40 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rt_sdcard_read &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadMultiBlocks
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>rt_sdcard_write</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_sdcard_write &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteMultiBlocks
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteBlock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>rt_sdcard_control</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, sdcard.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_sdcard_control &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sdcard.o(.text)
</UL>
<P><STRONG><a name="[6a]"></a>configure</STRONG> (Thumb, 314 bytes, Stack size 40 bytes, spi_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = configure &rArr; SPI_I2S_DeInit &rArr; RCC_APB1PeriphResetCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DeInit
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CalculateCRC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_bus.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>xfer</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, spi_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = xfer &rArr; GPIO_SetBits &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_SendData
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_ReceiveData
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_bus.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>SPI_RCC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, spi_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SPI_RCC_Configuration &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_spi_bus_init
</UL>

<P><STRONG><a name="[1a9]"></a>SPI_GPIO_Configuration</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, spi_bus.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SPI_GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stm32_spi_bus_init
</UL>

<P><STRONG><a name="[1e6]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1e5]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[21a]"></a>TI4_Config</STRONG> (Thumb, 130 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[219]"></a>TI3_Config</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[218]"></a>TI2_Config</STRONG> (Thumb, 164 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[217]"></a>TI1_Config</STRONG> (Thumb, 108 bytes, Stack size 20 bytes, stm32f10x_tim.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TIxExternalClockConfig
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_PWMIConfig
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ICInit
</UL>

<P><STRONG><a name="[ab]"></a>rti_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0)
</UL>
<P><STRONG><a name="[ac]"></a>rti_board_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.0.end)
</UL>
<P><STRONG><a name="[ad]"></a>rti_board_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.1.end)
</UL>
<P><STRONG><a name="[b2]"></a>rti_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, components.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> components.o(.rti_fn.6.end)
</UL>
<P><STRONG><a name="[58]"></a>rt_thread_idle_entry</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(.text)
</UL>
<P><STRONG><a name="[2af]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[2b4]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[2b2]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_recv
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>

<P><STRONG><a name="[2b5]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_control
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_detach
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_control
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_delete
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_control
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_delete
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_detach
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_delete
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_detach
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_control
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_delete
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_detach
</UL>

<P><STRONG><a name="[2cf]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[2b7]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_send
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[2b8]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_create
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_event_create
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_create
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_create
</UL>

<P><STRONG><a name="[2c1]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_urgent
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[2e7]"></a>print_number</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, kservice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2e6]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[2ee]"></a>plug_holes</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
</UL>

<P><STRONG><a name="[2f2]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[2f3]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[2f5]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, scheduler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[2f6]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[2ff]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_detach
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[301]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[302]"></a>_rt_thread_init</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, thread.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>

<P><STRONG><a name="[311]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[30a]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_create
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[30c]"></a>rt_timer_list_next_timeout</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_next_timeout_tick
</UL>

<P><STRONG><a name="[30e]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_delete
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[30b]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[30d]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_list_next_timeout
</UL>

<P><STRONG><a name="[313]"></a>usage_fault_track</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = usage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[314]"></a>bus_fault_track</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = bus_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[315]"></a>mem_manage_fault_track</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hard_fault_track
</UL>

<P><STRONG><a name="[316]"></a>hard_fault_track</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, cpuport.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = hard_fault_track &rArr; mem_manage_fault_track &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_manage_fault_track
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bus_fault_track
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usage_fault_track
</UL>
<BR>[Called By]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>

<P><STRONG><a name="[32b]"></a>copyfile</STRONG> (Thumb, 178 bytes, Stack size 56 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = copyfile &rArr; dfs_file_open &rArr; dfs_normalize_path &rArr; rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_write
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_read
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[32d]"></a>copydir</STRONG> (Thumb, 250 bytes, Stack size 304 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 784 + In Cycle
<LI>Call Chain = copydir &rArr;  copydir (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mkdir
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_stat
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_getdents
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_close
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_file_open
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyfile
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_normalize_path
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copydir
</UL>

<P><STRONG><a name="[32e]"></a>_get_path_lastname</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfs_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_path_lastname
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy
</UL>

<P><STRONG><a name="[34b]"></a>elm_result_to_dfs</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_stat
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_rename
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unlink
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_getdents
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_lseek
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_flush
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_write
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_read
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_close
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_open
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_statfs
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[348]"></a>get_disk</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, dfs_elm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mkfs
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_unmount
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfs_elm_mount
</UL>

<P><STRONG><a name="[375]"></a>mem_cpy</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[36a]"></a>mem_set</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[378]"></a>mem_cmp</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[380]"></a>chk_chr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[366]"></a>lock_fs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_req_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[367]"></a>unlock_fs</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = unlock_fs &rArr; ff_rel_grant &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_rel_grant
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[368]"></a>move_window</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[369]"></a>sync</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = sync &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[36d]"></a>remove_chain</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[36e]"></a>create_chain</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[389]"></a>clmt_clust</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[36f]"></a>dir_sdi</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
</UL>

<P><STRONG><a name="[371]"></a>dir_next</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[372]"></a>cmp_lfn</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cmp_lfn
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[37a]"></a>pick_lfn</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pick_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
</UL>

<P><STRONG><a name="[37c]"></a>fit_lfn</STRONG> (Thumb, 122 bytes, Stack size 20 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = fit_lfn
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[377]"></a>sum_sfn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sum_sfn
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[376]"></a>dir_find</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmp_lfn
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[379]"></a>dir_read</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pick_lfn
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_seekdir
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[37b]"></a>dir_register</STRONG> (Thumb, 400 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fit_lfn
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[37d]"></a>dir_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = dir_remove &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
</UL>

<P><STRONG><a name="[37e]"></a>create_name</STRONG> (Thumb, 534 bytes, Stack size 56 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[381]"></a>get_fileinfo</STRONG> (Thumb, 296 bytes, Stack size 48 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_fileinfo &rArr; ff_convert
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[382]"></a>follow_path</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
</UL>

<P><STRONG><a name="[383]"></a>check_fs</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = check_fs &rArr; disk_read &rArr; rt_device_read &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_mounted
</UL>

<P><STRONG><a name="[384]"></a>chk_mounted</STRONG> (Thumb, 928 bytes, Stack size 72 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = chk_mounted &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_utime
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_chmod
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_stat
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_rename
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkdir
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_getfree
</UL>

<P><STRONG><a name="[387]"></a>validate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = validate &rArr; lock_fs &rArr; ff_req_grant &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_fs
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_truncate
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[38d]"></a>rt_dma_calc_recved_len</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_dma_calc_recved_len &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
</UL>

<P><STRONG><a name="[38e]"></a>rt_dma_recv_update_get_index</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[38f]"></a>rt_dma_recv_update_put_index</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_dma_recv_update_put_index &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[390]"></a>_serial_dma_rx</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_recv_update_get_index
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_dma_calc_recved_len
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[59]"></a>rt_serial_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[5a]"></a>rt_serial_open</STRONG> (Thumb, 700 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>rt_serial_close</STRONG> (Thumb, 298 bytes, Stack size 16 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>rt_serial_read</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_serial_read &rArr; _serial_dma_rx &rArr; rt_dma_recv_update_get_index &rArr; rt_dma_calc_recved_len &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[5d]"></a>rt_serial_write</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>rt_serial_control</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(.text)
</UL>
<P><STRONG><a name="[394]"></a>_serial_poll_rx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[397]"></a>_serial_poll_tx</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[393]"></a>_serial_int_rx</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[395]"></a>_serial_int_tx</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[396]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[5f]"></a>_spi_bus_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _spi_bus_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[60]"></a>_spi_bus_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _spi_bus_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[61]"></a>_spi_bus_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>_spidev_device_read</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _spidev_device_read &rArr; rt_spi_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[63]"></a>_spidev_device_write</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, spi_dev.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _spidev_device_write &rArr; rt_spi_transfer &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_spi_transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[64]"></a>_spidev_device_control</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi_dev.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> spi_dev.o(.text)
</UL>
<P><STRONG><a name="[3a6]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[3a8]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[3a7]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[3a9]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_reset
</UL>

<P><STRONG><a name="[65]"></a>finsh_rx_ind</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = finsh_rx_ind &rArr; rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; list_thread &rArr; _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
</UL>
<BR>[Address Reference Count : 1]<UL><LI> shell.o(.text)
</UL>
<P><STRONG><a name="[3af]"></a>shell_auto_complete</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = shell_auto_complete &rArr; list_prefix &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3b9]"></a>shell_handle_history</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = shell_handle_history &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3ba]"></a>shell_push_history</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, shell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = shell_push_history
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_thread_entry
</UL>

<P><STRONG><a name="[3c9]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[3c3]"></a>object_name_maxlen</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = object_name_maxlen &rArr; rt_exit_critical &rArr;  rt_schedule (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>

<P><STRONG><a name="[3c4]"></a>_list_thread</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_thread &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[3c6]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[3c7]"></a>_list_sem</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[3ca]"></a>_list_event</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[3cb]"></a>_list_mutex</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_mutex &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>

<P><STRONG><a name="[3cc]"></a>_list_mailbox</STRONG> (Thumb, 146 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[3cd]"></a>_list_msgqueue</STRONG> (Thumb, 888 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>

<P><STRONG><a name="[3ce]"></a>_list_mempool</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
</UL>

<P><STRONG><a name="[3cf]"></a>_list_timer</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_timer &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[3d0]"></a>_list_device</STRONG> (Thumb, 104 bytes, Stack size 112 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _list_device &rArr; object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_split
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;object_name_maxlen
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[3d2]"></a>str_is_prefix</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[3d3]"></a>str_common</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = str_common
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_prefix
</UL>

<P><STRONG><a name="[3c8]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>

<P><STRONG><a name="[3c5]"></a>object_split</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cmd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = object_split &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>

<P><STRONG><a name="[3d4]"></a>finsh_compile</STRONG> (Thumb, 5712 bytes, Stack size 8 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = finsh_compile &rArr;  finsh_compile (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
</UL>
<BR>[Called By]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compile
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
</UL>

<P><STRONG><a name="[3d6]"></a>finsh_type_check</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, finsh_compiler.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = finsh_type_check &rArr;  finsh_type_check (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_type_check
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_compiler_run
</UL>

<P><STRONG><a name="[3da]"></a>finsh_block_insert</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[3d9]"></a>finsh_block_remove</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[3de]"></a>finsh_block_split</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, finsh_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[3db]"></a>finsh_block_merge</STRONG> (Thumb, 124 bytes, Stack size 12 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = finsh_block_merge
</UL>
<BR>[Called By]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>

<P><STRONG><a name="[3dc]"></a>finsh_heap_gc</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, finsh_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = finsh_heap_gc &rArr; finsh_heap_free &rArr; finsh_block_merge
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_heap_allocate
</UL>

<P><STRONG><a name="[3ef]"></a>make_sys_node</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = make_sys_node
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_allocate
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[3f0]"></a>proc_param_list</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + In Cycle
<LI>Call Chain = proc_param_list &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[3f3]"></a>proc_expr</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr_statement
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[3f4]"></a>proc_identifier</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_identifier &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
</UL>

<P><STRONG><a name="[3f5]"></a>proc_primary_expr</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_ptr
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_string
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_int
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_char
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
</UL>

<P><STRONG><a name="[3f6]"></a>proc_postfix_expr</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = proc_postfix_expr &rArr; proc_primary_expr &rArr;  proc_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_primary_expr
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[3f7]"></a>proc_unary_expr</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + In Cycle
<LI>Call Chain = proc_unary_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_postfix_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_long
</UL>
<BR>[Called By]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[3f9]"></a>proc_type</STRONG> (Thumb, 250 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = proc_type &rArr; finsh_token_token &rArr; token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
</UL>

<P><STRONG><a name="[3f8]"></a>proc_cast_expr</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + In Cycle
<LI>Call Chain = proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_unary_expr
</UL>

<P><STRONG><a name="[3fa]"></a>proc_multiplicative_expr</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_cast_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
</UL>

<P><STRONG><a name="[3fb]"></a>proc_additive_expr</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_multiplicative_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
</UL>

<P><STRONG><a name="[3fc]"></a>proc_shift_expr</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_additive_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
</UL>

<P><STRONG><a name="[3fd]"></a>proc_and_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_shift_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
</UL>

<P><STRONG><a name="[3fe]"></a>proc_exclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_and_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
</UL>

<P><STRONG><a name="[3ff]"></a>proc_inclusive_or_expr</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = proc_inclusive_or_expr &rArr; proc_exclusive_or_expr &rArr; proc_and_expr &rArr; proc_shift_expr &rArr; proc_additive_expr &rArr; proc_multiplicative_expr &rArr; proc_cast_expr &rArr;  proc_cast_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_exclusive_or_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
</UL>

<P><STRONG><a name="[3f1]"></a>proc_assign_expr</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520 + In Cycle
<LI>Call Chain = proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_inclusive_or_expr
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
</UL>
<BR>[Called By]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_variable_decl
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_param_list
</UL>

<P><STRONG><a name="[400]"></a>proc_variable_decl</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = proc_variable_decl &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_var_insert
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_assign_expr
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_type
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_identifier
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_sys_node
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_node_new_id
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[402]"></a>proc_expr_statement</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, finsh_parser.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = proc_expr_statement &rArr; proc_expr &rArr; proc_assign_expr &rArr;  proc_assign_expr (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proc_expr
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_parser_run
</UL>

<P><STRONG><a name="[409]"></a>token_prev_char</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, finsh_token.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[407]"></a>token_next_char</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[40a]"></a>token_spec_number</STRONG> (Thumb, 152 bytes, Stack size 40 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_spec_number
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
</UL>

<P><STRONG><a name="[408]"></a>token_proc_number</STRONG> (Thumb, 288 bytes, Stack size 160 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_spec_number
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[40b]"></a>token_proc_escape</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
</UL>

<P><STRONG><a name="[40c]"></a>token_proc_string</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = token_proc_string &rArr; token_proc_escape &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_escape
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[40d]"></a>token_proc_char</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = token_proc_char &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[40f]"></a>token_match_name</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_match_name &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[411]"></a>token_trim_space</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = token_trim_space &rArr; token_next_char
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_run
</UL>

<P><STRONG><a name="[412]"></a>token_run</STRONG> (Thumb, 414 bytes, Stack size 16 bytes, finsh_token.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = token_run &rArr; token_proc_number &rArr; token_spec_number
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_get_string
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_trim_space
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_match_name
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_char
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_string
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_proc_number
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_next_char
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;token_prev_char
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_error_set
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;finsh_token_token
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
